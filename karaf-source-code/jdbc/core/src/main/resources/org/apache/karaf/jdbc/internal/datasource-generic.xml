<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
    -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">

    <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>
        <property name="maxIdle" value="1"/>
    </bean>

    <bean id="connectionFactory" class="org.apache.commons.dbcp.DataSourceConnectionFactory">
        <argument ref="dataSource" />
    </bean>

    <bean id="connectionPool" class="org.apache.commons.pool.impl.GenericObjectPool" >
        <!-- No default factory -->
        <argument><null/></argument> <!-- factory -->
        <!--
            controls the maximum number of objects that can be allocated by the pool (checked out to clients, or
            idle awaiting checkout) at a given time. When non-positive, there is no limit to the number of objects that can
            be managed by the pool at one time. When maxActive is reached, the pool is said to be exhausted.
            The default setting for this parameter is 8.
         -->
        <argument value="8" /> <!-- maxActive -->
        <!--
            specifies the behavior of the borrowObject() method when the pool is exhausted:

            When whenExhaustedAction is WHEN_EXHAUSTED_FAIL, borrowObject() will throw a NoSuchElementException
            When whenExhaustedAction is WHEN_EXHAUSTED_GROW, borrowObject() will create a new object and return it
            (essentially making maxActive meaningless.)
            When whenExhaustedAction is WHEN_EXHAUSTED_BLOCK, borrowObject() will block (invoke Object.wait()) until
            a new or idle object is available. If a positive maxWait value is supplied, then borrowObject() will block for at most that many milliseconds, after which a NoSuchElementException will be thrown. If maxWait is non-positive, the borrowObject() method will block indefinitely.

            The default whenExhaustedAction setting is WHEN_EXHAUSTED_BLOCK and the default maxWait setting is -1.
            By default, therefore, borrowObject will block indefinitely until an idle instance becomes available.
        -->
        <argument value="WHEN_EXHAUSTED_BLOCK" /> <!-- whenExhaustedAction -->
        <!--
            the maximum amount of time to wait for an idle object when the pool is exhausted and whenExhaustedAction
            is WHEN_EXHAUSTED_BLOCK (otherwise ignored)
        -->
        <argument value="-1" /> <!-- maxWait -->
        <!--
            controls the maximum number of objects that can sit idle in the pool at any time.
            When negative, there is no limit to the number of objects that may be idle at one time.
            The default setting for this parameter is 8.
        -->
        <argument value="8" /> <!-- maxIdle -->
        <!--
           sets the minimum number of objects allowed in the pool before the evictor thread (if active) spawns
           new objects.
        -->
        <argument value="0" /> <!-- minIdle -->
        <!--
            when true, objects will be validated before being returned by the borrowObject() method.
        -->
        <argument value="false" /> <!-- testOnBorrow -->
        <!--
            when true, objects will be validated before being returned to the pool within the returnObject(T).
        -->
        <argument value="false" /> <!-- testOnReturn -->
        <!--
            sets the number of milliseconds to sleep between runs of the idle object evictor thread.
        -->
        <argument value="-1" /> <!-- timeBetweenEvictionRunsMillis -->
        <!--
            the number of idle objects to examine per run within the idle object eviction thread (if any)
        -->
        <argument value="3" /> <!-- numTestsPerEvictionRun -->
        <!--
            sets the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by
            the idle object evictor (if any). When non-positive, no objects will be evicted from the pool due to idle
            time alone.
        -->
        <argument value="1800000" /> <!-- minEvictableIdleTimeMillis -->
        <!--
            when true, objects will be validated by the idle object evictor (if any). If an object fails to validate,
            it will be dropped from the pool.
        -->
        <argument value="false" /> <!-- testWhileIdle -->
        <!--
            softMinEvictableIdleTimeMillis specifies the minimum amount of time an object may sit idle in the pool before
            it is eligible for eviction by the idle object evictor (if any), with the extra condition that at least "minIdle"
            object instances remain in the pool. When non-positive, no objects will be evicted from the pool due to idle time alone.
            This setting has no effect unless timeBetweenEvictionRunsMillis > 0. and it is superceded by
            minEvictableIdleTimeMillis (that is, if minEvictableIdleTimeMillis is positive, then
            softMinEvictableIdleTimeMillis is ignored). The default setting for this parameter is -1 (disabled).
        -->
        <argument value="-1" /> <!-- softMinEvictableIdleTimeMillis -->
        <!--
            lifo determines whether or not the pool returns idle objects in last-in-first-out order. The default setting for this parameter is true.
        -->
        <argument value="true" /> <!-- lifo -->
    </bean>

    <bean id="pooledConnectionFactory" class="org.apache.commons.dbcp.PoolableConnectionFactory" >
        <argument ref="connectionFactory" />
        <argument ref="connectionPool" />
        <argument><null/></argument>
        <!--
            a query to use to validate Connections. Should return at least one row. Using null turns off validation.
        -->
        <argument><null/></argument> <!-- validationQuery -->
        <!--
            the default "read only" setting for borrowed connections
        -->
        <argument value="false" /> <!-- defaultReadOnly -->
        <!--
            the default "auto commit" setting for returned connections
        -->
        <argument value="true" /> <!-- defaultAutoCommit -->
    </bean>

    <bean id="pooledDataSource" class="org.apache.commons.dbcp.PoolingDataSource" depends-on="pooledConnectionFactory">
        <argument ref="connectionPool" />
    </bean>

    <service ref="pooledDataSource" interface="javax.sql.DataSource">
        <service-properties>
            <entry key="osgi.jndi.service.name" value="jdbc/${name}"/>
        </service-properties>
    </service>

</blueprint>